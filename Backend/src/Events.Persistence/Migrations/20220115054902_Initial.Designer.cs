// <auto-generated />
using System;
using Events.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Events.Persistence.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20220115054902_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.2");

            modelBuilder.Entity("Events.Domain.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("FinalDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("InicialDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<decimal>("Price")
                        .HasColumnType("TEXT");

                    b.Property<int>("Quantity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Events.Domain.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime?>("DateEvent")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("Local")
                        .HasColumnType("TEXT");

                    b.Property<int>("NumPeople")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("Theme")
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlImage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Events.Domain.Panelist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Description")
                        .HasColumnType("TEXT");

                    b.Property<int>("Email")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Phone")
                        .HasColumnType("TEXT");

                    b.Property<string>("UrlImage")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Panelists");
                });

            modelBuilder.Entity("Events.Domain.PanelistEvent", b =>
                {
                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("PanelistId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EventId", "PanelistId");

                    b.HasIndex("PanelistId");

                    b.ToTable("PanelistsEvents");
                });

            modelBuilder.Entity("Events.Domain.SocialMedia", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<int?>("PanelistId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("URL")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("PanelistId");

                    b.ToTable("SocialMedias");
                });

            modelBuilder.Entity("Events.Domain.Batch", b =>
                {
                    b.HasOne("Events.Domain.Event", "Event")
                        .WithMany("Batches")
                        .HasForeignKey("EventId");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Events.Domain.PanelistEvent", b =>
                {
                    b.HasOne("Events.Domain.Event", "Event")
                        .WithMany("PanelistsEvents")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Events.Domain.Panelist", "Panelist")
                        .WithMany("PanelistsEvents")
                        .HasForeignKey("PanelistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Panelist");
                });

            modelBuilder.Entity("Events.Domain.SocialMedia", b =>
                {
                    b.HasOne("Events.Domain.Event", "Event")
                        .WithMany("SocialMedias")
                        .HasForeignKey("EventId");

                    b.HasOne("Events.Domain.Panelist", "Panelist")
                        .WithMany("SocialMedias")
                        .HasForeignKey("PanelistId");

                    b.Navigation("Event");

                    b.Navigation("Panelist");
                });

            modelBuilder.Entity("Events.Domain.Event", b =>
                {
                    b.Navigation("Batches");

                    b.Navigation("PanelistsEvents");

                    b.Navigation("SocialMedias");
                });

            modelBuilder.Entity("Events.Domain.Panelist", b =>
                {
                    b.Navigation("PanelistsEvents");

                    b.Navigation("SocialMedias");
                });
#pragma warning restore 612, 618
        }
    }
}
